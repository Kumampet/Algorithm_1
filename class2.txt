アルゴリズムとデータ構造2回目

【訂正】
アルゴリズムアサイメント：演習中に採点。出席扱いになるので最低一回は出す。締め切りは当日の演習中。
プログラミングアサイメント：ＡＢ問題は一週間後に変更。Ａはなるべく演習中に出すスタンスは変わらず。ＣＤも今学期終わるまでは変わらず。
AOJの仕様などはメール参照。
ローカル変数の初期化を必ずする。エラーの原因になる。
【お知らせ】
休講と補講(メール参照)

【忠告】
授業中に言わなかったアルゴリズムを演習で使う場合がある(前回の素数判定のアレ)

・基本的なソーティングアルゴリズム
・計算量を見積もる表記法
・計算量を問う問題はテストに必ず出る
O(g(h)):Big-Ohノーテーション
O(n^2):オーダーがn^2→計算量がn^2に比例する。
→例）：データ量(n)が１０倍になったらその計算量はいくつになるか
[スライド４]
f(n)がg(n)の定数倍(c)で抑えられる→n0より先ではg(n)を超えない。
[表記の例]
3n^2 + n + c = O(n^2)
とにかく一番影響力のある項を選ぶ(次数が大きい)
3n^2 + 2n + 5 = O(n^2)
1000n + 5 = O(n)
(3/2)^n = O(2^n)
logn2 = O(logn)
8n^5 + 2n^2 + 5 = O(n^5)

【重要】nが増加したときにどれだけ計算量が増えるか

[ソーティングアルゴリズム]
データ処理の基本
使おうとしているソートアルゴリズムの計算量を知る。O(?)
ソートアルゴリズムの特性を知る。(得手不得手)

演習問題Dはshell sort

[バブルソート]
データを後ろから比べる
初手で最小値を先頭に持ってくることができる。
[スライド２５]
iがソート済みの位置。jが注目する２項の位置。
バブルソートの計算量はO(N^2)

[セレクションソート(選択ソート)]
iの範囲の最小値(minj)とiの値を比較して入れ替える
現在見ているjとminjを比較。小さければ更新。
計算量はバブルソートと変わらない。等差数列の和。

【安定と不安定】
実用面では構造体やクラスをソートすることが多い。
位置が離れたデータを比較するアルゴリズムだと、不安定に陥ることが多い。
→つまり選択ソートが「不安定」なアルゴリズム。
＊クイックソート、爆速だけど不安定。＊
